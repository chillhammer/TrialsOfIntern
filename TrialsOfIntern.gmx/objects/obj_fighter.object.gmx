<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_body</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
facing = 1;

left_arm = instance_create(x, y, obj_hand);
right_arm = instance_create(x, y, obj_hand);
head = instance_create(x, y, obj_head);

left_arm.owner = self;
right_arm.owner = self;
head.owner = self;

punch_dist = 0;

punch_timer = 0;
punch_time = room_speed * 0.4;
punch_hit = false;

hurt_timer = 0;
hurt_time = room_speed * 0.5;

input_hor = 0;
max_speed_base = 5;
max_speed = max_speed_base;

max_jump_base = -8;
max_jump = max_jump_base;

size = 1;
head_size = 1;
hand_size = 1;
punch_length = 1;
punch_speed = 1;

rof = 1;

aim_x = 0;
aim_y = 0;

hsp = 0;
vsp = 0;

ally = true;
max_hp = 100;
hp = max_hp;

aim_dir = 0;

deathTimer = 0;
owner = noone;

colliding_toggle = true;

harvested = false;

// Example
fighterName = "Josh"; // player uses global.fighterPlayerName
stats = global.fighters[?"Josh"];

// DEBUG : Setting to character
event_perform(ev_other, ev_user0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy Arms &amp; References
with (left_arm)
    instance_destroy();
with (right_arm)
    instance_destroy();
    
// ALso in User Event 5
if (ally) {
    with (obj_controller) {
        var index = ds_list_find_index(allies, other);
        if (index != -1)
            ds_list_delete(allies, index);
    }
}
with (owner)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Harvested
if (harvested) {
    x = lerp(x, GetPlayer().x, 0.05 * game_speed);
    y = lerp(y, GetPlayer().y, 0.05 * game_speed);
    size = max(0, size - 0.02 * game_speed);
    if (size &lt; 0.03) { 
        var p = GetPlayer();
        p.size += 0.1;
        p.punch_length += 0.15;
        p.punch_time -= 0.15;
        p.max_hp += 20;
        p.hp = p.max_hp;
        instance_destroy(); 
    }
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Physics
var i_hor = input_hor;

if (hurt_timer &lt;= 0)
    hsp = clamp(hsp, -max_speed, max_speed);

hsp += i_hor * 0.3 * game_speed;

if (i_hor == 0) {
    if (hurt_timer &lt;= 0)
        hsp /= (1 + 0.1* game_speed);
    else
        hsp /= (1 + 0.1* game_speed);
}

if (aim_x != x &amp;&amp; punch_timer == 0)
    facing = sign(aim_x - x);
image_xscale = facing * size;
image_yscale = size;

// Hurt
hurt_timer = max(0, hurt_timer - game_speed);
    
// Horizontal Collision
if (place_meeting(x + hsp, y, obj_block) &amp;&amp; !place_meeting(x, y, obj_block) &amp;&amp; colliding_toggle) {
    x = xprevious;
    x -= hsp;
    hsp = -hsp;
    input_hor = -input_hor;
}

// Vertical Collision
var moveOffset = 0;
if (input_hor != 0) moveOffset = 0;
var onGround = instance_place(x, y + 4 + moveOffset, obj_block);
if (onGround &amp;&amp; colliding_toggle) {
    if (vsp &lt; 0) {
        y = yprevious - vsp;
        vsp = -vsp;
    } else {
        vsp = 0;
        while (onGround) {
            y -= 1;
            onGround = instance_place(x, y + 4 + moveOffset, obj_block);
        }
        y++;
    }
} else {
    // Gravity
    if (hurt_timer &gt; 0) {
        vsp -= 0.1 * game_speed;
    }
    vsp += 0.4 * game_speed;
    if (vsp &gt; 0)
        vsp += 0.4 * game_speed;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Simple HSP and VSP
x += hsp * game_speed;
y += vsp * game_speed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Out of Room
if ((y &gt; room_height || y &lt; 0) &amp;&amp; deathTimer &lt;= 0) {
    y = room_height * 0.5;
    x = room_width * 0.5;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death Check / TImers
if (deathTimer &gt; 0) {
    deathTimer += game_speed;
}
if (hp &lt;= 0 &amp;&amp; !IsDead(self)) {
    event_perform(ev_other, ev_user5);
}
// Ally should just die
if (ally) {
    if (deathTimer &gt; room_speed * 1.5) {
        colliding_toggle = false;
    }

    if (deathTimer &gt; room_speed * 3) {
        with (owner)
            instance_destroy();
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Play Death
deathTimer = 1;

// Reassigning enemy\
/*
with (obj_fighter) {
    if (id != GetPlayer() &amp;&amp; ds_list_find_index(obj_controller.allies, id) == -1) {
    
    }
}
*/

with (head) {
    event_perform(ev_other, ev_user0);
}

// Also in Destroy
if (ally) {
    with (obj_controller) {
        var index = ds_list_find_index(allies, other);
        if (index != -1)
            ds_list_delete(allies, index);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Exit it Hurt
if (hurt_timer &gt; 0 || hp &lt;= 0) exit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Punch
punch_timer = punch_time;
aim_dir = point_direction(x, y, aim_x, aim_y);
facing = sign(aim_x - x);
punched = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Exit it Hurt
if (hurt_timer &gt; 0 || hp &lt;= 0) exit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Jump
vsp = max_jump;
y -= 10 * game_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Exit it Hurt
if (hurt_timer &gt; 0 || hp &lt;= 0) exit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move Left
input_hor = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Exit it Hurt
if (hurt_timer &gt; 0 || hp &lt;= 0) exit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move Right
input_hor = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setting To Character
stats = global.fighters[?fighterName];
size = stats[?"size"];
head_size = stats[?"head_size"];
hand_size = stats[?"hand_size"];
rof = stats[?"rof"];

head.sprite_index = stats[?"head_spr"];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index, image_index, x, y, image_xscale * size, image_yscale * size, image_angle, c_white, image_alpha);
left_arm.target_x = x - 24 * size+ (facing == -1) * 6 * size;
left_arm.target_y = y;
right_arm.target_x = x + 24 * size - (facing == 1) * 6 * size;;
right_arm.target_y = y;


if (punch_timer == 0)
    aim_dir = point_direction(x, y, aim_x, aim_y);

// Head Bob
if (!IsDead(self)) {
    head.y = y - 10 * size + sin(current_time / 50)* 1 * size;
    head.x = x;
    head.image_xscale = size * facing * head_size;
    head.image_yscale = size * head_size;
    with (head) {
        draw_self();
        image_angle = other.aim_dir;
        //image_angle = point_direction(x, y, other.aim_x, other.aim_y);;
        if (image_xscale &lt; 0) image_angle += 180;
    }
}

// Feet
var skinType = stats[?"skin_type"];
var bobOffset = 0;
if (hsp != 0) {
    var bobSpdMod = 10 * (1 / game_speed);
    if (game_speed == 1) bobSpdMod = 1;
    bobOffset = sin(current_time / (3 * bobSpdMod)) * hsp * 0.5;
}

var l_foot_y = y + 8 + bobOffset;
var l_foot_x = x - 4 * facing;

draw_sprite_ext(spr_foot_left, skinType, l_foot_x, l_foot_y, size * facing, size, 0, c_white, image_alpha);

if (hsp != 0) 
    bobOffset = sin(current_time / (3 * bobSpdMod) + 100) * -hsp * 0.5;
    
var r_foot_y = y + 8 + bobOffset;
var r_foot_x = x + 4 * facing;

draw_sprite_ext(spr_foot_right, skinType, r_foot_x, r_foot_y, size * facing, size, 0, c_white, image_alpha);


// Punch Hand Movement
right_arm.punching = false;
left_arm.punching = false;

if (punch_timer &gt; 0) {
    punch_timer -= game_speed;
    var perc = abs(punch_time - punch_timer) / (punch_time);
    if (perc &lt; 0.4) {
        punch_dist = lerp(0, 80 * punch_length, perc / 0.4);
        if (facing == 1) 
            right_arm.punching = true;
        else
            left_arm.punching = true;
    } else {
        punch_dist = lerp(80 * punch_length, 0, (perc - 0.4) / 0.6);
    }
    //punch_dist *= facing;
}

if (game_speed &gt; 0.1) {
    if (facing == 1) {
        right_arm.target_x += lengthdir_x( punch_dist, aim_dir);
        right_arm.target_y += lengthdir_y( punch_dist, aim_dir);
        right_arm.image_angle = aim_dir;
        if (right_arm.image_xscale &lt; 0) right_arm.image_angle += 180;
        left_arm.image_angle = 0;
    } else {
        left_arm.target_x += lengthdir_x( punch_dist, aim_dir);
        left_arm.target_y += lengthdir_y( punch_dist, aim_dir);
        left_arm.image_angle = aim_dir;
        if (left_arm.image_xscale &lt; 0) left_arm.image_angle += 180;
        right_arm.image_angle = 0;
    }
}
if (facing != abs(left_arm.image_xscale) || facing != abs(right_arm.image_xscale)) {
    //left_arm.x = left_arm.target_x;
    //left_arm.y = left_arm.target_y;
    //right_arm.x = right_arm.target_x;
    //right_arm.y = right_arm.target_y;
}

// Common Arm Settings
left_arm.image_xscale = size * facing * hand_size;
right_arm.image_xscale = size * facing * hand_size;
left_arm.image_yscale = size *  hand_size;
right_arm.image_yscale = size *  hand_size;

left_arm.image_index = skinType;
right_arm.image_index = skinType;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
