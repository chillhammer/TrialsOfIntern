<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init

// Spawn enemy
fighter = instance_create(x, y, obj_fighter);
fighter.owner = self;

waitTimer = 0;
waitTime = room_speed * 0.5;

freeBehavior = false;

activateBehaviorTime = room_speed * 0.5;
activateBehaviorTimer = 0;

hitRateTime = room_speed * 0.5;
hitRateTimer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Take care of self
if (!instance_exists(fighter)) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ARITFICIAL INTELLIGENCE !!!

freeBehavior = true;
if (waitTimer &gt; 0) {
    freeBehavior = false;
}
show_debug_message(string(activateBehaviorTimer));
waitTimer = max(0, waitTimer - game_speed);
activateBehaviorTimer = max(0, activateBehaviorTimer - game_speed);
var willJump = false;
// Activate behaviors!
if (activateBehaviorTimer &lt;= 0) {
    activateBehaviorTimer = activateBehaviorTime;
    var roll = random(1);
    if (roll &lt; 0.9 - fighter.intelligence * 0.2  + (fighter.ally == true) * 0.1 * fighter.intelligence) {
        waitTimer = waitTime;
    }
    if (roll &lt; 0 + (fighter.intelligence - 2) * 0.2) {
        willJump = true;
    }
    
}


with (fighter) {
    var target = GetPlayer();
    if (ally) target = obj_controller.enemy;
    if (instance_exists(target)) {
        aim_x = target.x;
        aim_y = y;
        if (intelligence &gt; 3) aim_y = target.y;
        
        if (other.freeBehavior &amp;&amp; !IsDead(self) &amp;&amp; instance_exists(target)) {
            if (aim_x - x &lt; 0) {
                // move left
                event_perform(ev_other, ev_user2);
            } else if (aim_x - x &gt; 0) {
                // move right
                event_perform(ev_other, ev_user1);
            }
            
            if (y &gt; target.y &amp;&amp; willJump)
                event_perform(ev_other, ev_user3);
            
            var shouldHit = distance_to_object(target) &lt; 80 * punch_length;
            // Hit allies along the way
            if (!ally) {
                for (i = 0; i &lt; ds_list_size(obj_controller.allies); i++) {
                    var allyFighter = obj_controller.allies[|i];
                    if (distance_to_object(allyFighter) &lt; 80 * punch_length) {
                        if (sign (allyFighter.x - x) == facing) {
                            shouldHit = true;
                        }
                    }
                }
            }
            
            // Reset Aiming Variables Due to Target Potential Reassignment
            aim_x = target.x;
            aim_y = y;
            if (intelligence &gt; 3) aim_y = target.y;
            
            if (shouldHit) {
                if (other.hitRateTimer &lt;= 0) {
                    event_perform(ev_other, ev_user4);
                    other.hitRateTime = other.hitRateTimer;
                
                }
            }
            
            
        } else if (!instance_exists(target)) {
            // Post Win Behaviors
            input_hor = 0;
            
        } else {
            input_hor = 0;
        }
    } else {
        input_hor = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
